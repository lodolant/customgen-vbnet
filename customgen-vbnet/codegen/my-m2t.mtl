[comment encoding = UTF-8 /]
[comment]
 As we handle UML models, we register UML metamodel.
 Be careful while changing .mtl name, module name MUST 
 have the same name as its file.
[/comment]
[module my-m2t('http://www.eclipse.org/uml2/4.0.0/UML')]

[comment]
 Main entry.
 * Do NOT change its name, it must be "generate".
 * You can change input UML type to the one
   you want (e.g, "m : Model" or "c : Class" ...).
 * "[file ../]" block can be transfered in other 
   templates. Main entry does NOT have to contain
   this block, it can be put in other ones.
[/comment]
[template public generate(m : Model)]
[comment @main/]
[m.packagedElement.gen()/]
[/template]


[template public gen(p : PackageableElement)]
[/template]


[template public gen(p : Package) ? (not p.packagedElement->isEmpty())]
# ['['/]PACKAGE] [p.qualifiedName/]
[p.packagedElement->select(not oclIsKindOf(Package)).gen()/]
[p.packagedElement->select(oclIsKindOf(Package)).gen()/]
[/template]


[template public gen(c : Class)]
[file ('src/'.concat(c.qualifiedName.path()).concat('.vb'), false, 'UTF-8')]
/* Generated from GenMyModel */
[if (c.visibility = VisibilityKind::public)]Public Class [c.name/][else]Private Class [c.name/][/if]

[for (p : Property | c.ownedAttribute)][p.genAttribute()/][/for]

Sub New()
End Sub

[for (o : Operation | c.ownedOperation)][o.genOperation()/][/for]
[/file]
[/template]


[template public genAttribute(p : Property)]
	[if (p.visibility = VisibilityKind::private)]Private _[p.name/] As [p.type.name/];[else]Public [p.name/] As [p.type.name/];[/if]
[/template]


[template public genOperation(o : Operation)]
	[if (o.visibility = VisibilityKind::private)]Private [genMethod(o)/] _[o.name/]()[else]Public  [genMethod(o)/] [o.name/]()[/if]
[/template]


[template public genMethod(o : Operation)]
[if (o.returnResult() <> null)][if (o.returnResult().type.name.toString() = 'Property')][genProperty(o)/][else]Function [/if][else]
Sub [/if]
[/template]

[template public genProperty(o : Operation)]
        Get
        End Get

        Set(ByVal value)
        End Set
[/template]

[query public path(n : String) : String =
	 n.replaceAll('[^:]*::(.*)', '$1').replaceAll('::', '/')
/]